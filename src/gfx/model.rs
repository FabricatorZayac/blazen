use micromath::vector::{F32x2, I32x2};
use wasm4::draw::{DrawIndex, Framebuffer};

use crate::cards::card::Card;

use super::{
    Render, Triangle, TriangleFill,
    texture::{Texture, TextureColors},
};

pub struct CardModel<'a> {
    texture: [Texture<'a>; 2],
    vertices: [I32x2; 4],
}

impl Render for CardModel<'_> {
    fn render(self, fb: &Framebuffer) {
        let t1 = Triangle {
            vertices: [self.vertices[0], self.vertices[1], self.vertices[3]],
            fill: TriangleFill::Texture(self.texture[0]),
        };
        let t2 = Triangle {
            vertices: [self.vertices[1], self.vertices[2], self.vertices[3]],
            fill: TriangleFill::Texture(self.texture[1]),
        };

        t1.render(fb);
        t2.render(fb);
    }
}

impl<'a> CardModel<'a> {
    pub fn new(origin: I32x2, card: &'a Card) -> Self {
        // TODO: Derive texture from card
        let buf = &ACE_OF_SPADES;
        _ = card;
        let colors = TextureColors::OneBpp([DrawIndex::Second, DrawIndex::Fourth]);

        Self {
            texture: [
                Texture {
                    buf,
                    uv: [F32x2 { x: 0.0, y: 0.0 }, F32x2 { x: 1.0, y: 0.0 }, F32x2 {
                        x: 0.0,
                        y: 1.0,
                    }],
                    colors,
                },
                Texture {
                    buf,
                    uv: [F32x2 { x: 1.0, y: 0.0 }, F32x2 { x: 1.0, y: 1.0 }, F32x2 {
                        x: 0.0,
                        y: 1.0,
                    }],
                    colors,
                },
            ],
            vertices: [
                I32x2 {
                    x: origin.x - 15,
                    y: origin.y - 20,
                },
                I32x2 {
                    x: origin.x + 15,
                    y: origin.y - 20,
                },
                I32x2 {
                    x: origin.x + 15,
                    y: origin.y + 20,
                },
                I32x2 {
                    x: origin.x - 15,
                    y: origin.y + 20,
                },
            ],
        }
    }
}

// spades_ace
// NOTE: This will be replaced by prodcedural textures later
pub const ACE_OF_SPADES: [u8; 600] = [
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x1f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x9f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xfc, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x9f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfc, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x9f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xfe,
    0x01, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xfc, 0x00,
    0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xc4, 0x8f, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xfe, 0xcd, 0xff,
    0xfc, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0x03, 0xff, 0xfc,
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f,
    0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff,
    0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff,
    0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff,
    0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x30, 0xc0, 0x00,
    0x3f, 0xff, 0xfc, 0x00, 0x03, 0x0c, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x03, 0xf0, 0xfc, 0x00, 0xff,
    0xff, 0xff, 0x00, 0x3f, 0x0f, 0xc0, 0x0f, 0xff, 0xff, 0xfc, 0x3f, 0xf0, 0xff, 0xc3, 0xff, 0xff,
    0xff, 0xc3, 0xff, 0x0f, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x3f, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xb3, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0xff,
    0xf1, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf3, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x9f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf3, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x9f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x9f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
];
